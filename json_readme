/* 
 *
 * Philosophy 
 *
 *  Nesting JSON values
 *  We curry or wrap each set of JSON layer as we build upwards
 *    Examples of basic use of iu-landing-bot frameworks JSON formats
 *      ulib's message function ...
 *        {["content":  var, "delay": var, "cssClass": var, "human": var]}
 *      ubib's action function ...
 *        {["items": [ { "text": "cat", "value": "meow!" }, ...] ]}
 *
 *  To make this work, class / object is created with config parameters
 *    - framework/library we are using
 *    - script to be ran
 *
 *  The wrapping class then provides humane options
 *    - messages
 *    - actions (button for ULIB)
 *
 */

/* Format Planning - what to wrap around the ULIB library / framework
 * 
 * {
 *                            // First level of currying what type of method/func call from library
 *  functionName: var,        // method we are calling from library / framework
 *                            // this is the data hash going to framework that we are currying / wrapping
 *  {      
 *    // payload              // this is the data hash going to framework that we are currying / wrapping
 *  }
 *
 */
 
 
 
 /* Example -- with payload for a simple message
  * 
  * {
  *                            ** Our currying what type of method/func call from library
  *  fw: ulib,                 ** ... don't forget to initialize this obj before use
  *  function"type": message,    ** method we are calling from library / framework
  *
  *                            ** this is the data hash going to framework that we are currying / wrapping
  *    {      
  *      "content":  "Hey! ðŸ‘‹",    ** Second - we include any custom presentation classes for html/css 'cssClass'
  *      "cssClass": "no-icon",   ** Required:  what are we having said
  *      "delay": 1000,           ** super basic simulate somone is typing to you idea
  *    }
  *
  */
